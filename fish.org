#+TITLE: Fish Configuration
#+PROPERTY: header-args:fish :tangle ./dotfiles/fish/.config/fish/config.fish
#+auto_tangle: t

* VENV
This was for setup virtual environment management in shell
# set WORKON_HOME $HOME/.virtualenvs
# set VIRTUALENVWRAPPER_PYTHON /usr/bin/python3
# set PROJECT_HOME $HOME/Devel
# source /usr/local/bin/virtualenvwrapper.sh

If you want to create a new virtual environment with a different Python interpreter, add the --python PYTHON_EXE (-p for brevity) flag to vf new, where PYTHON_EXE is any Python executable. For example:

#vf new -p /usr/bin/python3 my_python3_env

* MISCELLANEOUS

#+begin_src fish
set fish_greeting # This disables the welcome message.
set TERM "xterm-256color"
set VISUAL "emacsclient -c -a emacs"              # $VISUAL use Emacs in GUI mode
#+end_src

* ALIASES

#+begin_src fish
alias migracion="python manage.py makemigrations"
alias migrar="python manage.py migrate"
alias servidor="python manage.py runserver_plus --nopin"
alias superusuario="python manage.py createsuperuser"
alias checar="python manage.py check"
alias proyecto="cd Documentos/Proyecto/editorial1"
alias celery="celery -A editorial1 worker -l info"
alias rasploc="cd ~/Documentos/Rasp32"
alias raspboot="qemu-system-arm -kernel kernel-qemu-4.4.34-jessie -cpu arm1176 -m 256 -M versatilepb -serial stdio -append \"root=/dev/sda2 rootfstype=ext4 rw\" -hda 2017-04-10-raspbian-jessie.img -net user,hostfwd=tcp::5022-:22 -net nic -no-reboot"
alias django_shell="python manage.py shell_plus --print-sql"
alias cat="bat"
# alias ls="exa -a --icons --group-directories-first"
# alias ll="exa -la --icons --group-directories-first"
alias killemacsd='emacsclient -e "(kill-emacs)"'
alias startemacsd='emacs --daemon'
# alias update='sudo apt update'
# alias install='sudo apt install'
alias cdrest='cd ~/hdd1/Documentos/projects/restaurante/django_restaurante/'
alias cdfront='cd ~/Documentos/proyectos/restaurante/nextjs/'
alias workon="vf activate"
alias rm="rm -Iv"
alias migrations="mkdir migrations && touch migrations/__init__.py"
#+end_src

** Arco Linux Aliases
#+begin_src fish
alias ls="exa --icons --group-directories-first --color=auto"
alias la='ls -a'
alias ll='ls -la'
alias l='exa'
alias l.="exa -A | egrep '^\.'"

#fix obvious typo's
alias cd..='cd ..'
alias pdw="pwd"
alias udpate='sudo pacman -Syyu'
alias upate='sudo pacman -Syyu'
alias updte='sudo pacman -Syyu'
alias updqte='sudo pacman -Syyu'
alias upqll="paru -Syu --noconfirm"
alias upal="paru -Syu --noconfirm"

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'


#readable output
alias df='df -h'


#pacman unlock
alias unlock="sudo rm /var/lib/pacman/db.lck"
alias rmpacmanlock="sudo rm /var/lib/pacman/db.lck"

#arcolinux logout unlock
alias rmlogoutlock="sudo rm /tmp/arcologout.lock"

#which graphical card is working
alias whichvga="/usr/local/bin/arcolinux-which-vga"

#free
alias free="free -mt"

#continue download
alias wget="wget -c"

#userlist
alias userlist="cut -d: -f1 /etc/passwd"

#merge new settings
alias merge="xrdb -merge ~/.Xresources"

# Aliases for software managment
# pacman or pm
alias pacman='sudo pacman --color auto'
alias update='sudo pacman -Syyu'

# paru as aur helper - updates everything
alias pksyua="paru -Syu --noconfirm"
alias upall="paru -Syu --noconfirm"

#ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

#grub update
alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

#add new fonts
alias update-fc='sudo fc-cache -fv'

#copy/paste all content of /etc/skel over to home folder - backup of config created - beware
alias skel='[ -d ~/.config ] || mkdir ~/.config && cp -Rf ~/.config ~/.config-backup-(date +%Y.%m.%d-%H.%M.%S) && cp -rf /etc/skel/* ~'
#backup contents of /etc/skel to hidden backup folder in home/user
alias bupskel='cp -Rf /etc/skel ~/.skel-backup-(date +%Y.%m.%d-%H.%M.%S)'

#copy bashrc-latest over on bashrc - cb= copy bashrc
#alias cb='sudo cp /etc/skel/.bashrc ~/.bashrc && source ~/.bashrc'
#copy /etc/skel/.zshrc over on ~/.zshrc - cb= copy zshrc
alias cz='sudo cp /etc/skel/.zshrc ~/.zshrc && exec zsh'

#switch between bash and zsh
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"

#switch between lightdm and sddm
alias tolightdm="sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings --noconfirm --needed ; sudo systemctl enable lightdm.service -f ; echo 'Lightm is active - reboot now'"
alias tosddm="sudo pacman -S sddm --noconfirm --needed ; sudo systemctl enable sddm.service -f ; echo 'Sddm is active - reboot now'"

#quickly kill conkies
alias kc='killall conky'

#hardware info --short
alias hw="hwinfo --short"

#skip integrity check
alias paruskip='paru -S --mflags --skipinteg'
alias yayskip='yay -S --mflags --skipinteg'
alias trizenskip='trizen -S --skipinteg'

#check vulnerabilities microcode
alias microcode='grep . /sys/devices/system/cpu/vulnerabilities/*'

#get fastest mirrors in your neighborhood
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 30 --number 10 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 30 --number 10 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 30 --number 10 --sort age --save /etc/pacman.d/mirrorlist"
#our experimental - best option for the moment
alias mirrorx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 5 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"
alias mirrorxx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 20 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"

#mounting the folder Public for exchange between host and guest on virtualbox
alias vbm="sudo /usr/local/bin/arcolinux-vbox-share"

#Cleanup orphaned packages
alias cleanup='sudo pacman -Rns (pacman -Qtdq)'

#search content with ripgrep
alias rg="rg --sort path"

#get the error messages from journalctl
alias jctl="journalctl -p 3 -xb"

#gpg
#verify signature for isos
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
alias fix-gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
#receive the key of a developer
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"
alias fix-gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"
alias fix-keyserver="[ -d ~/.gnupg ] || mkdir ~/.gnupg ; cp /etc/pacman.d/gnupg/gpg.conf ~/.gnupg/ ; echo 'done'"

#fixes
alias fix-permissions="sudo chown -R $USER:$USER ~/.config ~/.local"
alias keyfix="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fix-key="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fix-sddm-config="/usr/local/bin/arcolinux-fix-sddm-config"
alias fix-pacman-conf="/usr/local/bin/arcolinux-fix-pacman-conf"

#maintenance
alias big="expac -H M '%m\t%n' | sort -h | nl"
alias downgrada="sudo downgrade --ala-url https://ant.seedhost.eu/arcolinux/"

#systeminfo
alias probe="sudo -E hw-probe -all -upload"
alias sysfailed="systemctl list-units --failed"

#shutdown or reboot
alias ssn="sudo shutdown now"
alias sr="sudo reboot"

#update betterlockscreen images
alias bls="betterlockscreen -u /usr/share/backgrounds/arcolinux/"

#give the list of all installed desktops - xsessions desktops
alias xd="ls /usr/share/xsessions"

#arcolinux applications
alias att="arcolinux-tweak-tool"
alias adt="arcolinux-desktop-trasher"
alias abl="arcolinux-betterlockscreen"
alias agm="arcolinux-get-mirrors"
alias amr="arcolinux-mirrorlist-rank-info"
alias aom="arcolinux-osbeck-as-mirror"
alias ars="arcolinux-reflector-simple"
alias atm="arcolinux-tellme"
alias avs="arcolinux-vbox-share"
alias awa="arcolinux-welcome-app"

#remove
alias rmgitcache="rm -r ~/.cache/git"

#moving your personal files and folders from /personal to ~
alias personal='cp -Rf /personal/* ~'
#+end_src

* EXPORTS
echo "export PYTHONSTARTUP=~/.pythonrc" >> ~/.profile
#+begin_src fish
export PATH="~/ltx2any:$PATH"
export PYTHONPATH="~/ltx2any:$PYTHONPATH"
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH="$HOME/.local/bin/wal:$PATH"
if test -d "$HOME/.bin"
    export PATH="$HOME/.bin:$PATH"
end
if test -d "$HOME/.local/bin"
    export PATH="$HOME/.local/bin:$PATH"
end
export PATH="$HOME/hdd1/Aplicaciones/mendeleydesktop-1.19.8-linux-x86_64/bin:$PATH"

#+end_src

* VTERM
#+begin_src fish
function vterm_printf;
    if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end
        # tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
    else if string match -q -- "screen*" "$TERM"
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$argv"
    else
        printf "\e]%s\e\\" "$argv"
    end
end

# function vterm_prompt_end;
#     vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
# end

# functions --copy fish_prompt vterm_old_fish_prompt

# function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
#     # Remove the trailing newline from the original prompt. This is done
#     # using the string builtin from fish, but to make sure any escape codes
#     # are correctly interpreted, use %b for printf.
#     printf "%b" (string join "\n" (vterm_old_fish_prompt))
#     vterm_prompt_end
# end

if [ "$INSIDE_EMACS" = 'vterm' ]
    function clear
        vterm_printf "51;Evterm-clear-scrollback";
        tput clear;
    end
end

function vterm_cmd --description 'Run an Emacs command among the ones been defined in vterm-eval-cmds.'
    set -l vterm_elisp ()
    for arg in $argv
        set -a vterm_elisp (printf '"%s" ' (string replace -a -r '([\\\\"])' '\\\\\\\\$1' $arg))
    end
    vterm_printf '51;E'(string join '' $vterm_elisp)
end

function find_file
    set -q argv[1]; or set argv[1] "."
    vterm_cmd find-file (realpath "$argv")
end

function say
    vterm_cmd message "%s" "$argv"
end
#+end_src

# colorscript random

* STARSHIP
#+begin_src fish
# neofetch
# set django "$HOME/.bin"/*
# set scripts
# set exented "$HOME/.bin/batman"
# for value in $django
#     if test \( -f $value -a ( contains $value $exented ) \)
#         set -a scripts $value
#     end
#     echo ( contains $value $exented )
# end
# echo $strings
# eval $scripts[(random 1 (count $scripts))]

function ex
    if test -f $argv
        switch $argv
            case '*.tar.bz2'
                command tar xjf $argv
            case '*.tar.gz'
                command tar xzf $argv
            case '*.zip'
                command unzip $argv
            case '*'
                echo "$argv no puede ser extraido con ex()"
        end
    else
        echo '$argv no es un archivo válido'
    end
end

# echo $django
starship init fish | source
#+end_src
